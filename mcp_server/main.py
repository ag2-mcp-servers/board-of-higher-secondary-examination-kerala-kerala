# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:57:17+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    HpcerCertificatePostRequest,
    HpcerCertificatePostResponse,
    HpcerCertificatePostResponse1,
    HpcerCertificatePostResponse2,
    HpcerCertificatePostResponse3,
    HpcerCertificatePostResponse4,
    HpcerCertificatePostResponse5,
    HpcerCertificatePostResponse6,
)

app = MCPProxy(
    description='Board of Higher Secondary Examinations, Directorate of General Education, Government of Kerala has made available HSE Certificate cum Marklist of  MARCH 2020, which can be pulled by students into their Digilocker account',
    termsOfService='https://apisetu.gov.in/terms.php',
    title='BOARD OF HIGHER SECONDARY EXAMINATION, KERALA, Kerala',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/dhsekerala/v3'}],
)


@app.post(
    '/hpcer/certificate',
    description=""" API to verify Class XII Passing Certificate. """,
    tags=['certificate_creation_and_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def hpcer(body: HpcerCertificatePostRequest = None):
    """
    Class XII Passing Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
